import tkinter as tk
import random
import time

# Constants
WIDTH, HEIGHT = 500, 500
GRID_SIZE = 20
SNAKE_SPEED = 150

# Colors
BG_COLOR = "black"
SNAKE_COLOR = "green"
FOOD_COLOR = "red"

class SnakeGame(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Snake Game")
        self.geometry(f"{WIDTH}x{HEIGHT}")
        self.configure(bg=BG_COLOR)

        self.canvas = tk.Canvas(self, bg=BG_COLOR, width=WIDTH, height=HEIGHT)
        self.canvas.pack()

        self.snake = [(100, 50), (90, 50), (80, 50)]
        self.food = self.create_food()
        self.direction = "Right"
        self.score = 0

        self.bind("<Key>", self.change_direction)

        self.update()

    def create_food(self):
        while True:
            x = random.randint(0, WIDTH // GRID_SIZE - 1) * GRID_SIZE
            y = random.randint(0, HEIGHT // GRID_SIZE - 1) * GRID_SIZE
            if (x, y) not in self.snake:
                self.canvas.create_rectangle(x, y, x + GRID_SIZE, y + GRID_SIZE, fill=FOOD_COLOR)
                return x, y

    def change_direction(self, event):
        key = event.keysym
        if key == "Up" and self.direction != "Down":
            self.direction = "Up"
        elif key == "Down" and self.direction != "Up":
            self.direction = "Down"
        elif key == "Left" and self.direction != "Right":
            self.direction = "Left"
        elif key == "Right" and self.direction != "Left":
            self.direction = "Right"

    def move_snake(self):
        head_x, head_y = self.snake[0]

        if self.direction == "Up":
            new_head = (head_x, head_y - GRID_SIZE)
        elif self.direction == "Down":
            new_head = (head_x, head_y + GRID_SIZE)
        elif self.direction == "Left":
            new_head = (head_x - GRID_SIZE, head_y)
        elif self.direction == "Right":
            new_head = (head_x + GRID_SIZE, head_y)

        self.snake.insert(0, new_head)

        if new_head == self.food:
            self.score += 1
            self.food = self.create_food()
        else:
            self.snake.pop()

    def check_collision(self):
        head_x, head_y = self.snake[0]

        if head_x < 0 or head_x >= WIDTH or head_y < 0 or head_y >= HEIGHT:
            return True

        if head_x == self.snake[1][0] and head_y == self.snake[1][1]:
            return True

        return False

    def update(self):
        self.move_snake()
        if self.check_collision():
            self.game_over()
            return

        self.canvas.delete("all")
        self.canvas.create_rectangle(0, 0, WIDTH, HEIGHT, fill=BG_COLOR)

        for segment in self.snake:
            x, y = segment
            self.canvas.create_rectangle(x, y, x + GRID_SIZE, y + GRID_SIZE, fill=SNAKE_COLOR)

        self.canvas.create_rectangle(self.food[0], self.food[1], self.food[0] + GRID_SIZE, self.food[1] + GRID_SIZE, fill=FOOD_COLOR)

        self.canvas.create_text(10, 10, text=f"Score: {self.score}", anchor="nw", fill="white")

        self.after(SNAKE_SPEED, self.update)

    def game_over(self):
        self.canvas.create_text(WIDTH // 2, HEIGHT // 2, text=f"Game Over\nScore: {self.score}", fill="white", font=("Helvetica", 24))
        self.update()
        self.after(2000, self.quit)

if __name__ == "__main__":
    game = SnakeGame()
    game.mainloop()
